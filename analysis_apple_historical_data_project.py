# -*- coding: utf-8 -*-
"""Analysis Apple Historical Data Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgAA5bNgXpvBgAU_pDUfwN6Lo6-IzAdY
"""

import pandas as pd

import pandas as pd 
import matplotlib.pyplot as plt
data=pd.read_csv('/content/Churn_Modelling (1).csv')

data

data.head()

data.tail()

data.info()

data.min()

data.max()

data.describe() #statistics only numerical value

data.describe(include='all')

data.columns

data.head()

data.isnull()

data.isnull().sum()  #get sum of null value

data.count()

print(data.dtypes)

data.shape

print('Number of rows',data.shape[0])
print('Number of columns',data.shape[1])

data

data=data.dropna()
data

data['Geography'].unique()

data=pd.get_dummies(data,drop_first=True)

data.head()

data['CustomerId'].value_counts()

import seaborn as sns

sns.countplot(data['CustomerId'])

x=data.drop('CustomerId',axis=1)
x

y=data['CustomerId']
y

from imblearn.over_sampling import SMOTE

x_res,y_res=SMOTE().fit_resample(x,y)

x_res.value_counts()

y_res.value_counts()

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test=train_test_split(x_res,y_res,test_size=0.20,
                                                  random_state=12345,shuffle=False)

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

from sklearn.linear_model import LogisticRegression

log=LogisticRegression()

log.fit(x_train,y_train)

y_pred1=log.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred1)

from sklearn.metrics import recall_score,precision_score, f1_score

precision_score(y_test,y_pred1)

recall_score(y_test,y_pred1)

f1_score(y_test,y_pred1)

from sklearn.model_selection import train_test_split

train_test_split(x,y,test_size=0.20,random_state=42,stratify=y)

x_train, x_test, y_train, y_test=train_test_split(x_res,y_res,test_size=0.20,
                                                  random_state=142,shuffle=False)

x_train,x_test,y_train,y_test

#scaling feature

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

x_train #this is feature scaling

from sklearn.linear_model import LogisticRegression

log=LogisticRegression()

log.fit(x_train,y_train)

y_pred1=log.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred1)

from sklearn.metrics import recall_score,precision_score, f1_score

precision_score(y_test,y_pred1)

recall_score(y_test,y_pred1)

f1_score(y_test,y_pred1)

from sklearn import svm

svm=svm.SVC()

svm.fit(x_train, y_train)

y_pred2=svm.predict(x_test)

accuracy_score(y_test,y_pred2)

precision_score(y_test,y_pred2)

recall_score(y_test,y_pred2)

f1_score(y_test,y_pred2)

#KNeighborsClassifier

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier()

knn.fit(x_train,y_train)

y_pred3=knn.predict(x_test)

accuracy_score(y_test,y_pred3)

precision_score(y_test,y_pred3)

#decision tree classifier

from sklearn.tree import DecisionTreeClassifier

dt=DecisionTreeClassifier ()

dt.fit(x_train,y_train)

y_pred4=dt.predict(x_test)

accuracy_score(y_test,y_pred4)

precision_score(y_test,y_pred4)

#random forest classofore

from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier()

rf.fit(x_train,y_train)

y_pred5=rf.predict(x_test)

accuracy_score(y_test,y_pred5)

precision_score(y_test,y_pred5)

#gradient voosting classifer

from sklearn.ensemble import GradientBoostingClassifier

gbc=GradientBoostingClassifier()

gbc.fit(x_train,y_train)

y_pred6=gbc.predict(x_test)

accuracy_score(y_test,y_pred6)

precision_score(y_test,y_pred6)

#visualize the all ml model

import seaborn as sns

final_data=pd.DataFrame({'Models':['LR','SVC','KNN','DT','RF','GBC'],
                         'ACC':[accuracy_score(y_test,y_pred1),
                                accuracy_score(y_test,y_pred2),
                                accuracy_score(y_test,y_pred3),
                                accuracy_score(y_test,y_pred4),
                                accuracy_score(y_test,y_pred5),
                                accuracy_score(y_test,y_pred6)]})

final_data

import seaborn as sns

sns.barplot(x='Models',y='ACC',data=final_data)

sns

sns

#precision model with ml

final_data=pd.DataFrame({'Models':['LR','SVC','KNN','DT','RF','GBC'],
                         'ACC':[precision_score(y_test,y_pred1),
                               precision_score(y_test,y_pred2),
                               precision_score(y_test,y_pred3),
                               precision_score(y_test,y_pred4),
                               precision_score(y_test,y_pred5),
                               precision_score(y_test,y_pred6)]})

final_data

sns.barplot(x='Models',y='ACC',data=final_data)

sns

import numpy as np

import calendar
yy=2050
print(calendar.calendar(yy))

